What is Idempotency handling?
It means performing an operation multiple times produces the same result as performing it once
It ensures retrying safely
It prevents the creation of duplicate records or inconsistent data in a database.

The primary method for handling idempotency is through the use of an idempotency key. This is a unique identifier generated by the client and sent with each request.

There are 2 situations when we need to implement idempotency.
1. Sequential request
2. Parralel Request.

In Sequential request
1. The client creates a unique idempotent key ( uuid ) and attaches this key into headers or body
2. The server will validate whether the key is present in req, if not throw 400 error
3. If key is present, request will move forward and inserts in the DB or cache with status created/inital
4. The key status will be changed to completed/claimed once operation is succesful and return the status 201 - resource created
5. In case a duplicate request came, the idempoetnt key will be same. So we will check in db/cache whether key is present
And if present and status is created/inital, we will throw 409 conflict error and if the status is completed/claimed, we will send the 200 because resource was already created

In Parralel request
1. The process will remain same but if the request came in parrale with the same idempotent key, we will check the cache/db at the same time
and there will no key present at first, so both request will be completed.
2. To avoid this, we have to implement the mutual exclusing/locking on these critical sections
3. Only one read/write is allowed at one time. So by using this we can avoid duplicate request.
4. We can use Redis SETNX locking.

By default, GET, DELETE, PUT request are idempotent in nature
POST AND PATCH are not


follow up question?
What if the request are sent to different servers with the same idempotent key?
We will have to check key from cache not from db. And these different server cache will replicate their data sybcronously